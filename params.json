{"name":"Cloudster","tagline":"The fastest way to provision your AWS stack","body":"# Cloudster\r\n### The fastest way to provision your AWS stack !\r\n[![Gem Version](https://badge.fury.io/rb/cloudster.png)](https://rubygems.org/gems/cloudster)\r\n[![Build Status](https://travis-ci.org/emilsoman/cloudster.png)](https://travis-ci.org/emilsoman/cloudster)\r\n[![Coverage Status](https://coveralls.io/repos/emilsoman/cloudster/badge.png?branch=master)](https://coveralls.io/r/emilsoman/cloudster)\r\n[![Code Climate](https://codeclimate.com/github/emilsoman/cloudster.png)](https://codeclimate.com/github/emilsoman/cloudster)\r\n[![Dependency Status](https://gemnasium.com/emilsoman/cloudster.png)](https://gemnasium.com/emilsoman/cloudster)\r\n[![still maintained](http://stillmaintained.com/emilsoman/cloudster.png)](http://stillmaintained.com/emilsoman/cloudster)\r\n\r\nCloudster is a Ruby gem that was born to cut the learning curve involved in writing your own CloudFormation templates.\r\nIf you don't know what a CloudFormation template is, but know about the AWS Cloud,\r\nyou can still use cloudster to provision your stack like a boss.\r\nCheckout the Usage section.\r\n\r\n##Installation\r\n\r\n    gem install cloudster\r\n\r\n## Usage\r\n\r\nCreate AWS resources :\r\n\r\n```ruby\r\napp_server = Cloudster::Ec2.new(:name => 'AppServer',\r\n  :key_name => 'mykey',\r\n  :image_id => 'ami_image_id',\r\n  :instance_type => 't1.micro',\r\n  :security_groups => [\"DevSecurityGroup\"]\r\n)\r\n\r\n#Well I wanted to add chef clients to my app servers , so ..\r\nchef_client = Cloudster::ChefClient.new(\r\n :validation_key => 'asd3e33880889098asdnmnnasd8900890a8sdmasdjna9s880808asdnmnasd90-a',\r\n :server_url => 'http://10.50.60.70:4000',\r\n :node_name => 'project.environment.appserver_1',\r\n :interval => 1800\r\n)\r\nchef_client.add_to(app_server)\r\n\r\nelastic_ip = Cloudster::ElasticIp.new(:name => 'AppServerElasticIp')\r\nelastic_ip.add_to(app_server)\r\n\r\napp_server_2 = Cloudster::Ec2.new(:name => 'AppServer2',\r\n  :key_name => 'mykey',\r\n  :image_id => 'ami_image_id'\r\n)\r\n\r\n#Add your app servers to the ElasticLoadBalancer\r\nload_balancer = Cloudster::Elb.new(:name => 'LoadBalancer',\r\n  :instance_names => ['AppServer', 'AppServer2'],\r\n  :listeners => [{:port => 80, :instance_port => 8080, :protocol => 'HTTP'}]\r\n)\r\n\r\ndatabase = Cloudster::Rds.new(\r\n  :name => 'MySqlDB',\r\n  :instance_class => 'db.t1.micro',\r\n  :storage_class => '100',\r\n  :username => 'admin',\r\n  :password => 'admin123',\r\n  :engine => 'MySQL',\r\n  :multi_az => true\r\n)\r\n\r\nstorage = Cloudster::S3.new(\r\n  :name => 'MyBucket'\r\n)\r\n\r\ncloud_front = Cloudster::CloudFront.new(:name => 'CloudFrontResource')\r\ncloud_front.add_to storage\r\n\r\nelasticache = Cloudster::ElastiCache.new(\r\n  :name => 'CacheResource',\r\n  :node_type => 'cache.t1.micro',\r\n  :cache_security_group_names => ['default'],\r\n  :engine => 'memcached',\r\n  :node_count => 3\r\n)\r\n```\r\n\r\nCreate an instance for your cloud :\r\n\r\n```ruby\r\ncloud = Cloudster::Cloud.new(:access_key_id => 'accesskeyid', :secret_access_key => 'topsecretaccesskey', :region => 'us-west-1')\r\n```\r\n\r\nProvision the stack :\r\n\r\n```ruby\r\ncloud.provision(:resources => [app_server, app_server_2, load_balancer, database], :stack_name => 'TestStack', :description => 'Description of the stack')\r\n```\r\n\r\nGet the CloudFormation template for the stack :\r\n\r\n```ruby\r\ncloud.template(:resources => [app_server, app_server_2, load_balancer, database, storage, elasticache], :description => 'Description of the stack')\r\n```\r\n\r\nGet the CloudFormation template for a resource as a Ruby Hash :\r\n\r\n```ruby\r\napp_server.template\r\n```\r\n\r\nCloudster can also interact with the provisioned AWS Cloud :\r\n\r\n\r\n- Update the stack :\r\n\r\n```ruby\r\ncloud.update(:resources => [app_server, app_server_2], :stack_name => 'TestStack', :description => 'Description of the stack')\r\n```\r\n\r\n- Delete the stack and it's attached resources :\r\n\r\n```ruby\r\ncloud.delete(:stack_name => 'TestStack')\r\n```\r\n\r\n- Get the output attributes of each resource in the stack :\r\n\r\n```ruby\r\ncloud.outputs(:stack_name => 'TestStack')\r\n```\r\n\r\n- Describe the events of a stack :\r\n\r\n```ruby\r\ncloud.events(:stack_name => 'TestStack')\r\n```\r\n\r\n- Describe the attributes of a stack :\r\n\r\n```ruby\r\ncloud.describe(:stack_name => 'TestStack')\r\n```\r\n\r\n- Describe all resources of a stack :\r\n\r\n```ruby\r\ncloud.resources(:stack_name => 'TestStack')\r\n```\r\n\r\n- Get the status of a stack :\r\n\r\n```ruby\r\ncloud.status(:stack_name => 'TestStack')\r\n```\r\n\r\n- Describe the RDS endpoints in a stack :\r\n\r\n```ruby\r\ncloud.get_database_endpoints(:stack_name => 'TestStack')\r\n```\r\n\r\n- Get the details of all EC2 intances in a stack :\r\n\r\n```ruby\r\ncloud.get_ec2_details(:stack_name => 'TestStack')\r\n```\r\n\r\n- Get the details of all RDS intances in a stack :\r\n\r\n```ruby\r\ncloud.get_rds_details(:stack_name => 'TestStack')\r\n```\r\n\r\n- Get the details of all ELB intances in a stack :\r\n\r\n```ruby\r\ncloud.get_elb_details(:stack_name => 'TestStack')\r\n```\r\n\r\n- Get details of all keypairs created in the AWS account :\r\n\r\n```ruby\r\ncloud.get_key_pairs\r\n```\r\n\r\n- Get details of all Security Groups created in the AWS account :\r\n\r\n```ruby\r\ncloud.get_security_groups\r\n```\r\n\r\n### More coming soon ..\r\n\r\nI'm trying to add every AWS resource to cloudster, one by one. If you don't find what you need,\r\nlet me know and I'll try to get the feature included ASAP, or you can submit a pull request with the feature -\r\nthat would be awesome!\r\n\r\n----------------\r\n\r\n# Contribute\r\n\r\nGot some love for Cloudster? Sweet!\r\n\r\n## Found a bug?\r\n\r\nLog the bug in the [issue tracker](https://github.com/emilsoman/cloudster/issues). Be sure to include all relevant information, like\r\nthe versions of Cloudster and Ruby you're using. A [gist](http://gist.github.com/)\r\nof the code that caused the issue as well as any error messages are also very\r\nhelpful.\r\n\r\n## Need help?\r\n\r\nYou can use the [Issues](https://github.com/emilsoman/cloudster/issues) page to ask a new question for now. This is how you do it:\r\n1. Click on New Issue.\r\n2. Type in your question and submit.\r\n\r\n## Have a patch?\r\n\r\nBugs and feature requests that include patches are much more likely to\r\nget attention. Here are some guidelines that will help ensure your patch\r\ncan be applied as quickly as possible:\r\n\r\n1. **Use [Git](http://git-scm.com) and [GitHub](http://github.com):**\r\n   The easiest way to get setup is to fork the\r\n   [cloudster repo](http://github.com/emilsoman/cloudster/).\r\n\r\n2. **Write unit tests:** If you add or modify functionality, it must\r\n   include unit tests. I use RSpec to test cloudster. If you are not an\r\n   RSpec expert, if you let me know, I can help you write the specs.\r\n\r\n3. **Update the `README`:** If the patch adds or modifies a major feature,\r\n   modify the `README.md` file to reflect that. Again if you're not an\r\n   expert with Markdown syntax, it's really easy to learn. Check out [Prose.io](http://prose.io/) to\r\n   try it out.\r\n\r\n4. **Push it:** Once you're ready, push your changes to a topic branch\r\n   and add a note to the ticket with the URL to your branch. Or, say\r\n   something like, \"you can find the patch on johndoe/foobranch\". I also\r\n   gladly accept Github [pull requests](http://help.github.com/pull-requests/).\r\n\r\n__NOTE:__ _I will take in whatever I can get._ If you prefer to\r\nattach diffs in comments on issues, that's fine; but do know\r\nthat _someone_ will need to take the diff through the process described\r\nabove and this can hold things up considerably.\r\n\r\n\r\n##License\r\n\r\nMIT\r\n\r\n*Free Software, Forever . YEAH !*\r\n\r\n## Thanks\r\nTo [Fog](https://github.com/fog/fog) for making AWS APIs simple  \r\nTo Sinatra README for having a nice 'Contribute' section which I'm using(with minor changes) for Cloudster.\r\n","google":"UA-36099649-3","note":"Don't delete this file! It's used internally to help with page regeneration."}